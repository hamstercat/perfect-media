using System;
using System.Collections.Generic;
using System.Configuration;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Threading.Tasks;
using log4net.Config;
using Ninject;
using Ninject.Extensions.Conventions;
using PerfectMedia.Movies;
using PerfectMedia.TvShows.Metadata;
using PerfectMedia.UI.Busy;
using PerfectMedia.UI.Movies;
using PerfectMedia.UI.TvShows;

namespace PerfectMedia.UI
{
    public class ServiceLocator
    {
        private static readonly List<ServiceLocator> Instances = new List<ServiceLocator>();
        private readonly IKernel _kernel;
        private bool _initialized;

        public ITvShowManagerViewModel TvShowManagerViewModel
        {
            get { return _kernel.Get<ITvShowManagerViewModel>(); }
        }

        public IMovieManagerViewModel MovieManagerViewModel
        {
            get
            { return _kernel.Get<IMovieManagerViewModel>(); }
        }

        public IBusyProvider BusyProvider
        {
            get { return _kernel.Get<IBusyProvider>(); }
        }

        private IRestApiService ThetvdbRestApi
        {
            get
            {
                string theTvDbBaseUrl = ConfigurationManager.AppSettings["TheTvDbUrl"];
                return new RestApiService(theTvDbBaseUrl, "yyyy-MM-dd");
            }
        }

        private IRestApiService ThemoviedbRestApi
        {
            get
            {
                string themoviedbBaseUrl = ConfigurationManager.AppSettings["TheMovieDbUrl"];
                return new RestApiService(themoviedbBaseUrl, "yyyy-MM-dd");
            }
        }

        private IRestApiService ImdbRestApi
        {
            get
            {
                string imdbBaseUrl = ConfigurationManager.AppSettings["ImdbUrl"];
                return new RestApiService(imdbBaseUrl, "yyy-MM-dd");
            }
        }

        public ServiceLocator()
        {
            _kernel = new StandardKernel();
            XmlConfigurator.Configure();
            BindDependencies();
            Instances.Add(this);
        }

        public static void InitializeInstances()
        {
            foreach (ServiceLocator instance in Instances)
            {
                instance.Initialize();
            }
        }

        public static void UninitializeInstances()
        {
            foreach (ServiceLocator instance in Instances)
            {
                instance.Uninitialize();
            }
        }

        private void Initialize()
        {
            if (!_initialized)
            {
                _initialized = true;
                foreach (var svc in _kernel.GetAll<ILifecycleService>())
                {
                    svc.Initialize();
                }
            }
        }

        private void Uninitialize()
        {
            foreach (var svc in _kernel.GetAll<ILifecycleService>())
            {
                svc.Uninitialize();
            }
        }

        private void BindDependencies()
        {
            string currentAssemblyLocation = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);
            _kernel.Bind(config => config
                .FromAssembliesInPath(currentAssemblyLocation, assembly =>
                {
                    // Only load assemblies from PerfectMedia, and don't include PerfectMedia.UI.vshost.exe generated by Visual Studio when debugging
                    string assemblyName = assembly.ManifestModule.Name;
                    return assemblyName.StartsWith("PerfectMedia") && !assemblyName.EndsWith("vshost.exe");
                })
                .SelectAllClasses()
                .BindAllInterfaces()
                .Configure(b => b.InSingletonScope())
                .ConfigureFor<ThetvdbTvShowMetadataUpdater>(tvShowMetadataUpdater => tvShowMetadataUpdater.WithConstructorArgument(ThetvdbRestApi))
                .ConfigureFor<ThemoviedbMovieMetadataUpdater>(movieMetadataUpdater => movieMetadataUpdater.WithConstructorArgument(ThemoviedbRestApi))
                .ConfigureFor<ImdbMovieSynopsisService>(movieSynopsisService => movieSynopsisService.WithConstructorArgument(ImdbRestApi))
                .ConfigureFor<KeyDataStore>(keyDataStore => keyDataStore.InSingletonScope()));
        }
    }
}
